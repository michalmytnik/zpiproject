package pl.edu.pk.plagiarism.utils;



import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;


public class ReportsCreator {
  private static String FILE = "d://baza//";
 /* private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);*/
  /*private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD);*/
  //private BaseFont font = BaseFont.createFont("assets/fonts/arial.ttf",BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
 
   
  
  public static void createPdfReport(String fileName,  ComparisonStorage cs) {
    try {
      Document document = new Document();
      PdfWriter.getInstance(document, new FileOutputStream(FILE + fileName.replace("txt", "pdf")));
      document.open();
      addMetaData(document);
      addTitlePage(document,fileName, cs);
     
      System.out.println("Siemka");
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private static void addMetaData(Document document) {
    document.addTitle("My first PDF");
    document.addSubject("Using iText");
    document.addKeywords("Java, PDF, iText");
    document.addAuthor("Lars Vogel");
    document.addCreator("Lars Vogel");
  }

  private static void addTitlePage(Document document, String fileName, ComparisonStorage  cs)
      throws DocumentException, IOException {
      BaseFont baseFont = BaseFont.createFont(BaseFont.HELVETICA,BaseFont.CP1250,BaseFont.EMBEDDED);

      Font smallBold = new Font(baseFont,12);
      Font bigFont = new Font(baseFont, 16);
    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("Anty Plagiat Raport", bigFont));
    
    // Will create: Report generated by: _name, _date
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.DATE, 1);
    Date date = cal.getTime();             
    SimpleDateFormat format1 = new SimpleDateFormat("d MMM yyyy HH:mm:ss");
    String date1 = format1.format(date);            
    Date inActiveDate = null;
    try {
        inActiveDate = format1.parse(date1);
    } catch (ParseException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    preface.add(new Paragraph("Utworzono: " + date1, 
        smallBold));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("Dokument przedstawia raport wykrytego plagiatu dla pliku:  " + fileName,
        smallBold));

    addEmptyLine(preface, 2);
    
    URL url = ReportsCreator.class.getClassLoader().getResource("unname.png");
    
    System.out.println("URL PATH: " + url.getPath());
    Image image1 = Image.getInstance(url.getPath());
    preface.add(image1);

    

    preface.add(new Paragraph("Poniższa tabela przedstawia metryki użyte do obliczenia plagiatu i ich wartości: ",
            smallBold));
    
    
 
    addEmptyLine(preface, 2);

    document.add(preface);
    
    // now add all this to the document
    PdfPTable table = new PdfPTable(2);


    PdfPCell c1 = new PdfPCell(new Phrase("Nazwa metryki"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Paragraph("Wartosc:"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    table.setHeaderRows(1);


    	table.addCell(new Paragraph("Odległosc Levenstheina:"));
    	table.addCell(Double.toString(cs.getLevenstheinDistance()));
    	table.addCell(new Paragraph("Podobieństwo Tekstu:"));
    	table.addCell(Integer.toString(cs.getTextSimilarity())+ "%");
    	table.addCell(new Paragraph("Procentowe podobieństwo wersów:"));
    	table.addCell(Integer.toString(cs.getPecentageOfMatchRows()) + "%");
    	table.addCell(new Paragraph("Procentowe podobieństwo wyrazów:"));
    	table.addCell(Integer.toString(cs.getPecentageOfWordMatchWords()) + "%");
    	
    
    document.add(table);
    
    
  }
 

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
} 
